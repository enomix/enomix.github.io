<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker使用</title>
      <link href="/2022/12/03/docker%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/03/docker%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>System: Ubuntu 22.04</p><p>Docker version: 20.10.21</p><p>参考: <a href="https://www.cnblogs.com/cqpanda/p/16247919.html">安装docker</a><a href="https://blog.csdn.net/u013948858/article/details/78429954">用户权限设置</a><a href="https://docs.docker.com/engine/install/ubuntu/">官方文档</a><a href="https://blog.csdn.net/bean_business/article/details/108974600">修改docker镜像源</a></p></blockquote><h5 id="安装方式1-阿里云安装"><a href="#安装方式1-阿里云安装" class="headerlink" title="安装方式1: 阿里云安装"></a>安装方式1: 阿里云安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h5 id="安装方式2-apt包管理工具安装"><a href="#安装方式2-apt包管理工具安装" class="headerlink" title="安装方式2: apt包管理工具安装"></a>安装方式2: apt包管理工具安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新源, 并安装需要的软件</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入源仓库的 GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加 Docker APT 软件源</span></span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装docker, 最新版本</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查是否安装成功</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置开机启动docker</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h4 id="允许非root用户使用docker"><a href="#允许非root用户使用docker" class="headerlink" title="允许非root用户使用docker"></a>允许非root用户使用docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">防止docker自动更新</span></span><br><span class="line">sudo apt-mark hold docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许非root用户使用docker</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 新建docker用户组之前, 查看用户组中有没有docker组</span></span><br><span class="line">sudo cat /etc/group | grep docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 增加用户到用户组中</span></span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 检查是否生效</span></span><br><span class="line">sudo cat /etc/group | grep docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4. 退出当前用户登录状态, 重新登录</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5. 检查是否能够正常搜索, 不需要root权限了</span></span><br><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><h4 id="修改docker源"><a href="#修改docker源" class="headerlink" title="修改docker源"></a>修改docker源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前配置文件, 未曾配置的话就没有这个文件</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建此文件来修改镜像源</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在文件中写入以下内容, 网易云的源</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker.service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">也可以停止然后启动</span></span><br><span class="line">systemctl stop docker.service</span><br><span class="line">systemctl start docker.service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看源</span></span><br><span class="line">docker info|grep Mirrors -A 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取一个docker镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索docker中的MySQL镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取MySQL镜像</span></span><br><span class="line">docker pull mysql#会自动下载latest版本 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动MySQL镜像</span></span><br><span class="line">docker run -t -i mysql /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出镜像</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的安装与配置</title>
      <link href="/2022/10/17/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/10/17/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要参照了<a href="https://anzhiy.cn/posts/ddae.html">安知鱼</a>的教程，然后从中提取了自己部署的流程，给大家一个参考</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="电脑上要提前安装好git和node"><a href="#电脑上要提前安装好git和node" class="headerlink" title="电脑上要提前安装好git和node"></a>电脑上要提前安装好git和node</h4><h5 id="node安装与中国镜像配置"><a href="#node安装与中国镜像配置" class="headerlink" title="node安装与中国镜像配置"></a>node安装与中国镜像配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h5 id="检查环境是否安装成功"><a href="#检查环境是否安装成功" class="headerlink" title="检查环境是否安装成功"></a>检查环境是否安装成功</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>检查网络是否通畅，npm不能使用就使用cnpm下载。同时要注意是否需要管理员用户权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装hexo-cli脚手架</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>cd到你想要保存网站文件的目录，然后执行初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并进入博客目录</span></span><br><span class="line"><span class="built_in">mkdir</span> Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#安装部署网站到 git page 的模块</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>执行命令查看网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>会出现一个localhost加端口的地址， 浏览器访问这个地址就能查看网站效果了</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>这里选择butterfly主题 <a href="https://butterfly.js.org/">butterfly官网</a></p><p>参考官方教程，安装主题到themes文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cd到hexo博客根目录下执行，会将主题自动安装到themes/butterfly/下</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>应用主题</p><p>修改根目录下的<code>_config.yml</code>配置文件，把主题改成<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>复制<code>butterfly</code>主题下的<code>_config.yml</code>，然后粘贴到根目录下，重命名为<code>_config.butterfly.yml</code>，Hexo会自动合并<code>_config.yml</code>和这个<code>_config.butterfly.yml</code>，而且主题配置文件优先级更高。以后修改主题配置就使用<code>_config.butterfly.yml</code>就行了。</p><h3 id="美化主题"><a href="#美化主题" class="headerlink" title="美化主题"></a>美化主题</h3><h4 id="自定义css"><a href="#自定义css" class="headerlink" title="自定义css"></a>自定义css</h4><p>新建文件<code>Blog/source/css/custom.css</code>， 在<code>custom.css</code>中添加内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @font-face &#123;</span></span><br><span class="line"><span class="comment">  font-family: Candyhome;</span></span><br><span class="line"><span class="comment">  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);</span></span><br><span class="line"><span class="comment">  font-display: swap;</span></span><br><span class="line"><span class="comment">  font-weight: lighter;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;ZhuZiAYuanJWD&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="comment">/* 可以定义图标大小 */</span></span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 时间轴生肖icon */</span></span><br><span class="line">svg<span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="comment">/* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* width和height定义图标的默认宽度和高度*/</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-zhongbiao</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f7c768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bilibli番剧插件 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.bangumi-tab</span><span class="selector-class">.bangumi-active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-ahoverbg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-tab</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-theme) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-ahoverbg) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-button</span><span class="selector-class">.bangumi-nextpage</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-tab</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">svg<span class="selector-class">.icon</span><span class="selector-class">.faa-tada</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解决artitalk的图标问题 */</span></span><br><span class="line"><span class="selector-id">#uploadSource</span> &gt; svg &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.19em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.not-top-img</span>)<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页面正文背景 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分页页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 归档页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标签页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*夜间模式伪类遮罩层透明*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#rightside</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#425aef</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#425aef</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音乐播放器 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* .aplayer .aplayer-lrc &#123;</span></span><br><span class="line"><span class="comment">  display: none !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999999</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论框  */</span></span><br><span class="line"><span class="selector-class">.vwrap</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置评论框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vcard</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标图标 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/x1.cur&quot;</span>), auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>) &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/x2.cur&quot;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* md网站下划线 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-id">#hpp_talk</span> <span class="selector-tag">p</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 404页面 */</span></span><br><span class="line"><span class="selector-id">#error-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">18rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-box-shadow);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-img</span> &#123;</span><br><span class="line">  box-<span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#425aef</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> &#123;</span><br><span class="line">  box-<span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Titillium Web, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-class">.error_title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">9em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-class">.error_subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">3.5rem</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-word;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--btn-bg);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--btn-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-group</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.thumbnail</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">143px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-card-bg);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> <span class="selector-tag">time</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 代码框主题 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">figure</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>/Blog/source/img/</code>下添加从<a href="https://zhutix.com/tag/cursors/">致美化</a>下载的鼠标指针，箭头和手指两种指针</p><p>最后在配置文件<code>_config.butterfly.yml</code>中搜索 Inject 添加以下代码，将自定义 css<code>custom.css</code>引入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>修改<code>_config.butterfly.yml</code>主题配置的时候，有几个常用修改的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 修改代码框</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 启用本地搜索</span></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#3. 网站图标和用户头像</span></span><br><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https://cdn.jsdelivr.net/gh/enomix/blogpics/img/fantasy.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/enomix/blogpics/img/fantasy.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 网站背景设置</span></span><br><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://raw.githubusercontent.com/enomix/blogpics/master/img/wallhaven-j58y6y.jpg)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 鼠标点击效果</span></span><br><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>想要修改网站为中文，要修改Hexo的配置文件<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">enomix&#x27;s</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;subtitle&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;个人笔记&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">enomix</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><ol><li><p>创建远程仓库</p><p>要在GitHub上面新建一个仓库，项目名称必须是 “用户名.github.io”</p></li><li><p>配置<code>SSH</code>秘钥</p><p>在电脑上打开一个窗口，然后输入以下代码，双引号中填自己的邮箱地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;example@163.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后需要你输入在哪个文件中保存，还有密码什么的，直接不管，一直回车，直到执行结束，然后找到提示中的存放目录，复制密钥</p></li><li><p>在GitHub中添加公钥</p><p>GitHub登录&gt;<code>settings</code>&gt;<code>SSH and GPG keys</code>&gt;<code>New SSH key</code>， 填上名称和key的值，然后添加</p></li><li><p>测试key是否能用</p><p>终端里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>然后会出现 <strong>“Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?”</strong> 的字样，输入<code>yes</code>就可以了</p><p>最后会出现 **”Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.”**， 表示配置成功了</p></li><li><p>配置Git个人信息</p><p>终端里面配置本地的名字和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;YourName&quot;</span>            </span><br><span class="line">git config --global user.email <span class="string">&quot;example@163.com&quot;</span></span><br></pre></td></tr></table></figure><p>配置完成， 本机成功连接到GitHub</p></li></ol><hr><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><p>在Hexo根目录下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;YourTitle&quot;</span></span><br></pre></td></tr></table></figure><p>会自动创建一个新的md文件在&#x2F;source&#x2F;_posts&#x2F;下，而且还带有一些标头，具体配置可以看<code>butterfly</code>官方文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客的安装与配置</span><br><span class="line">date: 2022-10-17 18:16:02</span><br><span class="line">tags: Hexo</span><br><span class="line">cover: 这里填图床地址</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面就可以用markdown格式来编写博客了</p><h3 id="提交到GitHub上"><a href="#提交到GitHub上" class="headerlink" title="提交到GitHub上"></a>提交到GitHub上</h3><p>打开GitHub的创建好的博客仓库里面，复制SSH地址，然后修改本地Hexo的配置文件<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:XXX/XXX.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Hexo文件夹下执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果出错了，说**”ERROR Deployer not found: git”**，表示deployer没安装好，重新安装一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>博客已经部署到服务器上了</p><blockquote><p>如果访问”yourname.github.io”不能访问到博客，就到<code>settings</code>&gt;<code>Pages</code>设置主分支为<code>Github Pages</code></p></blockquote><h3 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h3><blockquote><p>使用<code>PicGo</code>+ <code>GitHub</code>+ <code>CDN</code>的组合来配置</p></blockquote><ol><li><p>PicGo配置</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo官网</a>安装<code>PicGo</code>，PicGo设置中翻到最下面，显示的图床， 只勾选GitHub。点击侧边栏中的GitHub配置，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设定仓库名：GitHubUsername/RepositoryName</span><br><span class="line">设定分支名：master</span><br><span class="line">设定Token：你的 GitHub 生成的一个 Token</span><br><span class="line">设定存储路径：也就是会保存到你仓库下的某个目录</span><br><span class="line">设定自定义域名：https://cdn.jsdelivr.net/gh/GitHubUsername/RepositoryName</span><br></pre></td></tr></table></figure></li><li><p>GitHub配置</p><p>GitHub网站&gt;<code>Settings</code>&gt;<code>Developer settings</code>&gt;<code>Personal access tokens</code>点击<code>Generate new token</code>，然后填上token名、有效期，最后选择scopes要勾选repo，完成后点击<code>Generate token</code>复制Token，粘贴到<code>PicGo</code>里面</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/17/hello-world/"/>
      <url>/2022/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="清除静态文件"><a href="#清除静态文件" class="headerlink" title="清除静态文件"></a>清除静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="跑本地服务-测试是否成功"><a href="#跑本地服务-测试是否成功" class="headerlink" title="跑本地服务, 测试是否成功"></a>跑本地服务, 测试是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="部署到远程服务器上"><a href="#部署到远程服务器上" class="headerlink" title="部署到远程服务器上"></a>部署到远程服务器上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring电脑商城项目</title>
      <link href="/2022/10/07/Spring%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/10/07/Spring%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><blockquote><p>本文章依照bilibili上的<a href="https://www.bilibili.com/video/BV1bf4y1V7Bx">SpringBoot电脑商城项目</a>编写</p></blockquote><h3 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h3><p>一般先搭建项目, 然后写好一个模块, 将整个项目流程跑通. 例如用户管理模块. 开发一个模块一般是按照: “数据库设计&gt;持久层&gt;业务层&gt;控制层&gt;前端页面” 这样的顺序来开发.</p><p><strong>持久层</strong>: 用来将数据持久化. 一般用MyBatis来生成相应的SQL语句, 并接收数据库返回结果. 其包含SQL映射(编写具体的SQL), mapper接口(定义具体的查询方法名和参数),  属性与数据库字段对应的用户实体类, 相关的mapper测试类</p><p><strong>业务层</strong>: 处理数据的逻辑, 将控制层提供的参数做一定的处理然后再传递给持久层一个结果, 或持久层反馈的数据进行处理返回给控制层. 该层包含处理数据要抛出的自定义异常, 业务层的接口和其抽象方法, 接口的实现方法, 相关的service测试类.</p><p><strong>控制层</strong>: 处理前端的网络请求, 发送相关的数据给业务层, 和处理业务层返回的响应结果返回给前端. 注意, 控制层要将业务层抛出的异常和自己产生的异常一并处理了. 控制层包含了相应的控制类和控制层产生的异常.</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ol><li>JDK8 1.8.0_301</li><li>maven 3.6.3</li><li>MySQL 5.7</li><li>IDEA 2021.1.3</li></ol><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `store` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure><p>新建一个Spring Initializr 项目, Type: Maven; Packaging: jar; Java version: 8; 添加Spring Web, MyBatis Framework, MySQL Driver依赖.</p><p>依赖下载完成之后, 配置resources&#x2F;application.properties, 添加数据源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>启动该SpringBoot项目, 查看是否能够成功运行</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在store数据库下创建t_user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">uid <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">password <span class="type">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">salt <span class="type">CHAR</span>(<span class="number">36</span>) COMMENT <span class="string">&#x27;盐值&#x27;</span>,</span><br><span class="line">phone <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;电话号码&#x27;</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">30</span>) COMMENT <span class="string">&#x27;电子邮箱&#x27;</span>,</span><br><span class="line">gender <span class="type">INT</span> COMMENT <span class="string">&#x27;性别:0-女，1-男&#x27;</span>,</span><br><span class="line">avatar <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">is_delete <span class="type">INT</span> COMMENT <span class="string">&#x27;是否删除：0-未删除，1-已删除&#x27;</span>,</span><br><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;日志-创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-最后修改执行人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;日志-最后修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (uid)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连个实体类是因为每个表中都有固定的四个字段, 将其提取出来作为基类, 其他实体类继承这个类就行了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为实体类的基类</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//@Data注解是lombok插件的注解, 可以自动生成getter, setter, equals, hashCode, toString等方法, 如果需要有参和无参构造函数就添加@AllArgsConstructor 和 @NoArgsConstructor 这两个注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;<span class="comment">//为了便于数据传输，实现序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> String createdUser;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;</span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应数据表的User实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt; <span class="comment">//盐值, 用于加密密码</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;<span class="comment">//&#x27;性别:0-女，1-男&#x27;,</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="注册-持久层"><a href="#注册-持久层" class="headerlink" title="注册-持久层"></a>注册-持久层</h4><blockquote><p><strong>持久层</strong>: 用来将数据持久化. 一般用MyBatis来生成相应的SQL语句, 并接收数据库返回结果. 其包含SQL映射(编写具体的SQL), mapper接口(定义具体的查询方法名和参数),  属性与数据库字段对应的用户实体类, 相关的mapper测试类</p></blockquote><ol><li>编写SQL语句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#新增用户的语句</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(除了uid以外的字段) <span class="keyword">values</span> (与前面字段匹配的值) </span><br><span class="line"></span><br><span class="line">#查询用户的语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><ol start="2"><li>定义mapper接口和其抽象方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User实体类对应的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">    User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>编写映射文件</p><p>创建&#x2F;resources&#x2F;mapper&#x2F;UserMapper.xml, 将以上两个抽象方法的映射配置出来</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace属性: 用于指定当前的映射文件和哪个接口进行映射, 需要指定接口的文件路径, 需要标注包的完整路径接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sp.store.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自定义映射规则: resultMap 标签来完成映射规则的定义</span></span><br><span class="line"><span class="comment">        id 属性: 标签给这个映射负责分配一个唯一的id值, 对应的就是resultMap=&quot;id属性的值&quot;属性的取值</span></span><br><span class="line"><span class="comment">        type属性: 取值是一个类, 表示的是数据库中的查询结果与Java中哪个实体类进行结果集的映射</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.sp.store.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表的字段和类的属性不一致的字段进行匹配指定, 名称一致的字段可以省略不写</span></span><br><span class="line"><span class="comment">            column属性: 表示表中的字段名称</span></span><br><span class="line"><span class="comment">            property属性: 表示类中的属性名称</span></span><br><span class="line"><span class="comment">            在定义映射规则的时候主键(id)是不可以省略的,一定要写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDelete&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--id属性: 表示映射的接口中方法的名称, 直接在标签的内部来编写sql语句--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--useGeneratedKeys属性: 表示开启某个字段的值递增(主键设置为递增)</span></span><br><span class="line"><span class="comment">        keyProperty属性: 标签将表中的哪个字段作为主键进行递增</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO</span><br><span class="line">        t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)</span><br><span class="line">        VALUES</span><br><span class="line">        (#&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;, #&#123;phone&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;avatar&#125;, #&#123;isDelete&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户名查询用户数据：User findByUsername(String username)</span></span><br><span class="line"><span class="comment">        select语句在执行的时候, 查询的结果是一个对象, 多个对象</span></span><br><span class="line"><span class="comment">        resultType: 表示查询的结果集类型, 只需要指定对应映射类的类型, 并且包含完整包结构resultType=&quot;com.sp.store.entity.User&quot;, 这种方式需要表的字段和类的属性名完全一致</span></span><br><span class="line"><span class="comment">        resultMap: 表示当表的字段名和对象属性名不一致时, 来自定义结果集的映射规则. 比如说表中is_delete字段, 类中的属性名为isDelete, 这个时候就会找到自己定义的结果集映射规则, 找到相对应的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserEntityMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        *</span><br><span class="line">        FROM</span><br><span class="line">        t_user</span><br><span class="line">        WHERE</span><br><span class="line">        username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在properties配置文件或者自己改的yml文件中添加mapper映射文件的位置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>单元测试</p><p>完成以上工作之后要进行一下单元测试来看看是否能够成功执行sql语句, 在&#x2F;src&#x2F;test&#x2F;下的与&#x2F;src&#x2F;main&#x2F;下mapper接口对应的位置创建UserMapperTests.java, 然后编写两个测试方法测试, 看看数据库里面有没有成功执行相关sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.28 12:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SpringBootTest: 表示标注当前的类是一个测试类, 不会随同项目一块打包</span></span><br><span class="line"><span class="comment">//@RunWith: 表示启动这个单元测试类(单元测试类时不能够运行的), 需要传递一个参数, 必须是 SpringRunner的实例类型</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTests</span> &#123;</span><br><span class="line">    <span class="comment">/*直接写这个Mapper属性, 自动装配的时候, 会报红, 出现以下提示:</span></span><br><span class="line"><span class="comment">      Could not autowire. No beans of &#x27;UserMapper&#x27; type found.</span></span><br><span class="line"><span class="comment">      idea有检测的功能, 接口是不能够直接创建Bean的,</span></span><br><span class="line"><span class="comment">      MyBatis创建了这个接口的动态代理实现类, 来完成了对象的创建</span></span><br><span class="line"><span class="comment">      可以在Settings -&gt; Editor -&gt; Inspections 中找到 Spring -&gt; SpringCore -&gt; Code -&gt; Autowiring for bean class 将其提示等级从Error改低到Warning就行了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单元测试方法: 可以单独独立运行, 不用启动整个项目, 可以左单元测试, 提升了代码的测试效率</span></span><br><span class="line"><span class="comment">     * 1. 必须被<span class="doctag">@Test</span>注解修饰</span></span><br><span class="line"><span class="comment">     * 2. 返回值类型必须是void</span></span><br><span class="line"><span class="comment">     * 3. 方法的参数列表不指定任何类型</span></span><br><span class="line"><span class="comment">     * 4. 方法的访问修饰符必须是public</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;tim&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserByName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.findByUsername(<span class="string">&quot;tim&quot;</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="注册-业务层"><a href="#注册-业务层" class="headerlink" title="注册-业务层"></a>注册-业务层</h4><blockquote><p><strong>业务层</strong>: 处理数据的逻辑, 将控制层提供的参数做一定的处理然后再传递给持久层一个结果, 或持久层反馈的数据进行处理返回给控制层. 该层包含处理数据要抛出的自定义异常, 业务层的接口和其抽象方法, 接口的实现方法, 相关的service测试类.</p></blockquote><ol><li><p>规划异常处理机制</p><p>因为在后端处理业务, 会出现各种异常, 比如说插入异常, 密码不匹配, 数据库修改异常, 用户名重复异常, 用户未找到异常等等, 以上的情况都会抛出RuntimeException异常. </p><p>其对定位是什么异常不够准确, 所以在Service层通常需要自定义异常, 在service&#x2F;ex&#x2F;下定义一个Service异常基类, 然后在Service层要抛出的异常就自己新建, 然后继承基类就行了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务层异常的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service层异常基类的子类异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据在插入过程中锁产生的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 密码验证失败的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户在更新数据时产生未知的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名被占用的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameDuplicatedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户数据不存在的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义业务层接口和抽象方法</p><p>创建 &#x2F;service&#x2F;IUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户的数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义接口的实现类, 处理请求</p><p>用户注册流程: </p><ol><li>使用User对象来传递控制层传过来的用户名和密码等属性</li><li>要先查看用户名是否被注册了, 被注册了就抛出<code>UsernameDuplicatedException</code>异常.</li><li>正常的话, 就开始加密密码, 使用UUID来产生一个盐值, 与密码进行字符串拼接之后再使用MD5进行三次加密. 这样, 当用户登录的时候就可以使用相同的流程来生成相同的值, 与数据库中保存的密码进行比对. 好处就是①就算密码相同, 每个人的密码字段都不同. ②可以忽略原本密码的强度, 提升安全性.</li><li>将处理过后的User对象传递给<code>UserMapper</code>, 若其返回值不为1的话, 就执行失败. 抛出<code>InsertException</code>异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块业务层的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.28 14:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//@Service注解: 将当前类的对象交给Spring来管理, 自动创建对象以及对象的维护</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//通过user参数来获取传递过来的username</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> user.getUsername();</span><br><span class="line">        <span class="comment">//调用findByUsername(username)判断用户的是否被注册过</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">        <span class="comment">//判断结果集是否部位null, 则抛出用户名被占用的异常</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果用户名已经被占用, 则抛出UsernameDuplicateException异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameDuplicatedException</span>(<span class="string">&quot;尝试注册的用户名[&quot;</span> + username +<span class="string">&quot;]已经被占用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建当前的时间对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//补全数据: 加密后的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">        <span class="comment">//将密码和盐值作为一个整体进行加密处理, 忽略了原来密码的强度, 提升了数据的安全性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5Password</span> <span class="operator">=</span> getMD5Password(user.getPassword(), salt);</span><br><span class="line">        <span class="comment">//将加密之后的密码重新补全设置到user对象中</span></span><br><span class="line">        user.setPassword(md5Password);</span><br><span class="line">        <span class="comment">//补全数据: 盐值</span></span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        <span class="comment">//补全数据: is_delete设置为0</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//补全数据: 4个日志字段信息</span></span><br><span class="line">        user.setCreatedUser(user.getUsername());</span><br><span class="line">        user.setModifiedUser(user.getUsername());</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setModifiedTime(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行注册业务功能的实现(rows == 1 时执行成功)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;在用户注册过程中产生了未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 原始密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt 盐值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMD5Password</span><span class="params">(String password, String salt)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 加密规则：</span></span><br><span class="line"><span class="comment">             * 1、无视原始密码的强度</span></span><br><span class="line"><span class="comment">             * 2、使用UUID作为盐值，在原始密码的左右两侧拼接</span></span><br><span class="line"><span class="comment">             * 3、MD5加密算法的调用(循环加密三次)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt + password +salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回加密之后的密码</span></span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>单元测试</p><p>可以看到在项目的test目录下有着和main路径相同的目录结构, 我们在test下与main对应的目录中创建 &#x2F;store&#x2F;service&#x2F;UserServiceTests.java 文件.</p><blockquote><p>注意: </p><ol><li>这个测试类中的函数要添加 junit 中的 @Test 注解</li><li>在测试方法中可以添加try-catch来处理异常, 也可以不添加, 因为项目中一般都在Controller层来处理异常.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.28 12:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SpringBootTest: 表示标注当前的类是一个测试类, 不会随同项目一块打包</span></span><br><span class="line"><span class="comment">//@RunWith: 表示启动这个单元测试类(单元测试类时不能够运行的), 需要传递一个参数, 必须是 SpringRunner的实例类型</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单元测试方法: 可以单独独立运行, 不用启动整个项目, 可以左单元测试, 提升了代码的测试效率</span></span><br><span class="line"><span class="comment">     * 1. 必须被<span class="doctag">@Test</span>注解修饰</span></span><br><span class="line"><span class="comment">     * 2. 返回值类型必须是void</span></span><br><span class="line"><span class="comment">     * 3. 方法的参数列表不指定任何类型</span></span><br><span class="line"><span class="comment">     * 4. 方法的访问修饰符必须是public</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;sp02&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            userService.reg(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            <span class="comment">//获取类的对象, 再获取类的名称</span></span><br><span class="line">            System.out.println(e.getClass().getSimpleName());</span><br><span class="line">            <span class="comment">//获取异常的具体描述信息</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="注册-控制层"><a href="#注册-控制层" class="headerlink" title="注册-控制层"></a>注册-控制层</h4><ol><li><p>创建响应</p><p>状态码, 状态描述信息, 数据. 着部分功能封装到一个类中, 将这个类作为方法返回值, 返回给前端浏览器.</p><p>在util工具包中写一个处理Json的工具类, 创建store&#x2F;util&#x2F;JsonResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json格式的数据进行响应</span></span><br><span class="line"><span class="comment"> * 响应结果类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>处理请求</p><p>请求路径：&#x2F;user</p><p>请求参数：User user,HttpSession session,String code</p><p>请求类型：post</p><p>响应结果：JsonResult&lt; Void&gt;</p><ul><li><p><input disabled="" type="checkbox"> 方式一: 创建一个控制层对应的类<code>UserController</code>类, 依赖于业务层的接口, 在这个类中处理异常, 这样每次写一个方法就要处理一次异常.</p></li><li><p><input checked="" disabled="" type="checkbox"> 方式二: 创建一个<code>BaseController</code>来全局处理自定义的异常, 该类将所有的异常进行统一处理. 然后所有的控制层的Controller都继承该Controller, 这样就避免重复写大量的异常了.</p><p>创建&#x2F;store&#x2F;controller&#x2F;Basecontroller.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局处理异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="comment">//操作成功的状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求处理方法, 这个方法的返回值就是需要传递给前端的数据</span></span><br><span class="line">    <span class="comment">//自动将异常对象传递给此方法的参数列表上</span></span><br><span class="line">    <span class="comment">//当前项目中产生了异常, 被统一拦截到此方法中, 这个方法此时就充当的时请求处理方法, 方法的返回值直接给到前端</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span> <span class="comment">//统一处理抛出的异常, serviceException产生的异常都会被拦截到这个方法里</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameDuplicateException)&#123;</span><br><span class="line">            result.setStatus(<span class="number">4000</span>); <span class="comment">//表示用户名重复</span></span><br><span class="line">            result.setMessage(e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException)&#123;</span><br><span class="line">            result.setStatus(<span class="number">5000</span>); <span class="comment">//数据库或服务器有问题</span></span><br><span class="line">            result.setMessage(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回异常处理结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建&#x2F;store&#x2F;controller&#x2F;UserController.java, 继承BaseController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.28 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//@Controller + @ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //使用方式一就这样写, 每个请求都要处理一下异常, 很麻烦</span></span><br><span class="line"><span class="comment">    @RequestMapping(&quot;reg&quot;)</span></span><br><span class="line"><span class="comment">    //@ResponseBody 表示此方法的响应结果以Json格式数据响应到前端</span></span><br><span class="line"><span class="comment">    public JsonResult&lt;Void&gt; reg(User user) &#123;</span></span><br><span class="line"><span class="comment">        //创建相应结果对象</span></span><br><span class="line"><span class="comment">        JsonResult&lt;Void&gt; result = new JsonResult&lt;&gt;();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            userService.reg(user);</span></span><br><span class="line"><span class="comment">            result.setState(200);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;用户注册成功&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (UsernameDuplicatedException e) &#123;</span></span><br><span class="line"><span class="comment">            result.setState(4000);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;用户名被占用&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (InsertException e) &#123;</span></span><br><span class="line"><span class="comment">            result.setState(5000);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;注册时产生位置的异常&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return result;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *方式二的写法</span></span><br><span class="line"><span class="comment">     * 约定大于配置: 开发思想来完成, 省略大量的配置甚至注解的编写</span></span><br><span class="line"><span class="comment">     * 1. 接收数据方式: 请求处理方法的参数列表设置为pojo类型来接收前端的数据</span></span><br><span class="line"><span class="comment">     *  SpringBoot会将前端的url地址中的参数名和pojo类的属性进行比较, 如果这两个名称相同,</span></span><br><span class="line"><span class="comment">     *  则将插入到pojo类中对应的属性上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用浏览器或者API调试工具如 postman 进行测试</p><p>打开浏览器访问<a href="http://localhost:8080/users/reg?username=test01&amp;password=123456">http://localhost:8080/users/reg?username=test01&amp;password=123456</a></p><p>看看是否返回了正确的值</p></li></ol><h4 id="注册-前端页面"><a href="#注册-前端页面" class="headerlink" title="注册-前端页面"></a>注册-前端页面</h4><ol><li><p>在register页面中编写发送请求的方法, 点击时间来完成. 选中对应的按钮 $(“#btn-reg”), 通过点击按钮, 利用jQuery包下的ajax发送请求</p><p>将前端文件导入到 resources&#x2F;static&#x2F; 下, 然后在register.html文件中页脚标签后面添加js代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">            <span class="comment">//1. 监听注册按钮是否被点击, 如果被点击可以执行一个方法</span></span><br><span class="line">            $(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//动态获取表单中控制的数据</span></span><br><span class="line">                <span class="comment">// let username = $(&quot;#username&quot;).val();</span></span><br><span class="line">                <span class="comment">// let pwd = $(&quot;#password&quot;).val();</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//2. 发送ajax()的一部请求来完成用户的注册功能</span></span><br><span class="line">                $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&quot;/users/reg&quot;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">                    <span class="attr">data</span>: $(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">                    <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">alert</span>(<span class="string">&quot;注册失败&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&quot;注册时产生位置的错误&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="登录-持久层"><a href="#登录-持久层" class="headerlink" title="登录-持久层"></a>登录-持久层</h4><p>持久层中可以利用写注册模块时编写的sql语句判断用户是否存在. sql语句&#x2F;mapper接口&#x2F;mapper接口的映射文件都可以服用注册模块的</p><h4 id="登录-业务层"><a href="#登录-业务层" class="headerlink" title="登录-业务层"></a>登录-业务层</h4><ol><li><p>规划异常</p><p>之前写登录页面时创建过两个异常, <code>PasswordNotMatchException</code> 和 <code>UserNotFoundException</code> , 这里就不用写了.</p></li><li><p>编写service接口和抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IUserService接口添加</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前匹配的用户数据, 如果没有则返回null值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//IUserService接口的实现类UserServiceImpl中添加</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">//根据用户名来查询用户的数据是或否存在, 如果不存在则抛出异常</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检测用户的密码是否匹配</span></span><br><span class="line">        <span class="comment">//1. 先获取到数据库中的加密之后的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldPassword</span> <span class="operator">=</span> result.getPassword();</span><br><span class="line">        <span class="comment">//2. 和用户传递过来的额密码进行比较</span></span><br><span class="line">        <span class="comment">//2.1 获取盐值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> result.getSalt();</span><br><span class="line">        <span class="comment">//2.2 将用户的密码按照相同的md5算法规则进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newMd5Password</span> <span class="operator">=</span> getMD5Password(password, salt);</span><br><span class="line">        <span class="comment">//3. 将密码进行比较</span></span><br><span class="line">        <span class="keyword">if</span> (!newMd5Password.equals(oldPassword)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断is_delete 字段的值是否为1, 表示被标记为删除</span></span><br><span class="line">        <span class="keyword">if</span> (result.getIsDelete() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户信息脱敏操作, 返回的信息少, 提升了系统性能和安全性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUid(result.getUid());</span><br><span class="line">        user.setUsername(result.getUsername());</span><br><span class="line">        user.setAvatar(result.getAvatar());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将用户的信息返回</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试</p><p>test目录下的service&#x2F;userServiceTests中添加以下代码, 进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(<span class="string">&quot;test01&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="登录-控制层"><a href="#登录-控制层" class="headerlink" title="登录-控制层"></a>登录-控制层</h4><ol><li><p>设计请求</p></li><li><p>处理异常</p><p>在控制器的基类BaseController中添加两个新的异常 <code>UserNotFoundException</code> 和 <code>PasswordNotMatchException</code>, 为其设置状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">    JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Void&gt;(e);</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameDuplicateException) &#123;</span><br><span class="line">        result.setState(<span class="number">4000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UserNotFoundException) &#123;</span><br><span class="line">        result.setState(<span class="number">4001</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> PasswordNotMatchException) &#123;</span><br><span class="line">        result.setState(<span class="number">4002</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException) &#123;</span><br><span class="line">        result.setState(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>处理请求</p><p>在&#x2F;store&#x2F;controller&#x2F;BaseController里面添加两个读取session的方法, SpringBoot会自动将HttpSession作为参数传参.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取session对象中的uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前登录用户的uid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Integer <span class="title function_">getUidFromSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.valueOf(session.getAttribute(<span class="string">&quot;uid&quot;</span>).toString());</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前登录用户的username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前登录用户的用户名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在HttpSession实现类中重写父类中的toString(), 不是句柄信息的输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;store&#x2F;controller&#x2F;UserController.java里面添加</p><p>使用Session来保存登录状态, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 2. 接收数据方式: 请求处理方法的参数列表设置为非pojo类型</span></span><br><span class="line"><span class="comment">    * SpringBoot会直接将请求的参数名和方法的参数名直接进行比较, 如果名称相同则自动完成依赖的注入</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult&lt;User&gt;login(String username, String password, HttpSession session) &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">data</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">       <span class="comment">//向session对象中完成数据的绑定(session全局)</span></span><br><span class="line">       session.setAttribute(<span class="string">&quot;uid&quot;</span>, data.getUid());</span><br><span class="line">       session.setAttribute(<span class="string">&quot;username&quot;</span>, data.getUsername());</span><br><span class="line">       <span class="comment">//获取session中的绑定的数据</span></span><br><span class="line">       System.out.println(getUidFromSession(session));</span><br><span class="line">       System.out.println(getUsernameFromSession(session));</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK, data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="登录-前端页面"><a href="#登录-前端页面" class="headerlink" title="登录-前端页面"></a>登录-前端页面</h4><p>在login.html页面中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/users/login&quot;</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line"><span class="comment">//将服务器返回头像设置到Cookie中</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>, json.<span class="property">data</span>.<span class="property">avatar</span>, &#123;<span class="attr">expires</span>: <span class="number">7</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cookie中的avatar=&quot;</span> + $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>));</span><br><span class="line"><span class="comment">//跳转到系统主页index.html</span></span><br><span class="line"><span class="comment">//相对路径来确定跳转到的页面</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;登录失败&quot;</span> + json.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;登录时产生未知的异常&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>启动项目，访问<a href="http://localhost:8080/users/login?username=test01&amp;password=1234%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E3%80%82">http://localhost:8080/users/login?username=test01&amp;password=1234请求进行登录。</a></p><h4 id="登录-拦截器"><a href="#登录-拦截器" class="headerlink" title="登录-拦截器"></a>登录-拦截器</h4><p>创建&#x2F;store&#x2F;interceptor&#x2F;LoginInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个拦截器</span></span><br><span class="line"><span class="comment"> * 实现springmvc里面的HandlerInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.30 23:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测全局session对象中是否有uid数据, 如果有则放行, 如果没有则重定向到登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理器(url + Controller: 映射)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回值为true表示放行当前的请求, 如果返回值为false则表示拦截当前的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// HttpServletRequest对象来获取session对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明用户没有登录过系统, 则重定向到login.html页面</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">            <span class="comment">//结束后续的调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//请求放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置拦截器</p><p>创建&#x2F;store&#x2F;config&#x2F;LoginInterceptorConfigurer.java</p><p>放行相关静态资源的请求和接口的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sp.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理器拦截器的注册</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022.09.30 23:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//加载当前的拦截器并进行注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//创建自定义的拦截器对象</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置白名单: 存放在一个List集合</span></span><br><span class="line">        List&lt;String&gt; patterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        patterns.add(<span class="string">&quot;/bootstrap3/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/css/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/reg&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/login&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/change_password&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/get_by_uid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成拦截器的注册</span></span><br><span class="line">        registry.addInterceptor(interceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(patterns);<span class="comment">//表示要拦截的url是什么</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用指令</title>
      <link href="/2022/10/02/Ubuntu%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/10/02/Ubuntu%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="1-Ubuntu重新安装vi编辑器"><a href="#1-Ubuntu重新安装vi编辑器" class="headerlink" title="1.Ubuntu重新安装vi编辑器"></a>1.Ubuntu重新安装vi编辑器</h3><p>卸载命令：sudo apt-get  remove  vim-common</p><p>卸载完毕后重新安装；输入命令：sudo apt-get  install  vim</p><h3 id="2-将中文文件夹改成英文："><a href="#2-将中文文件夹改成英文：" class="headerlink" title="2.将中文文件夹改成英文："></a>2.将中文文件夹改成英文：</h3><p>  export LANG&#x3D;en_US</p><p>  xdg-user-dirs-gtk-update</p><h3 id="3-Ubuntu18设置国内源"><a href="#3-Ubuntu18设置国内源" class="headerlink" title="3.Ubuntu18设置国内源"></a>3.Ubuntu18设置国内源</h3><p>用于加快下载速度</p><p>方法①：更换&#x2F;etc&#x2F;apt&#x2F;sources.list文件里面的下载源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开sources.list文件</span></span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑这个文件，修改为国内阿里源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最后刷新一下这个列表</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>方法②：在software&amp;updates（软件和更新）里面选择阿里源</p><p>在第一个Ubuntu Software里面选择Download from 阿里源的地址</p><h3 id="Debian和Ubuntu安装指定版本的nodejs"><a href="#Debian和Ubuntu安装指定版本的nodejs" class="headerlink" title="Debian和Ubuntu安装指定版本的nodejs"></a>Debian和Ubuntu安装指定版本的nodejs</h3><p><a href="https://atetux.com/how-to-install-nodejs-16-ubuntu-20-04-debian-10">https://atetux.com/how-to-install-nodejs-16-ubuntu-20-04-debian-10</a></p><p>升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>下载curl工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl -y</span><br></pre></td></tr></table></figure><p>下载 Node.js 16</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</span><br><span class="line">sudo apt install -y nodejs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> development server you might need to install development tools</span></span><br><span class="line">sudo apt-get install gcc g++ make</span><br></pre></td></tr></table></figure><p>然后就可以执行验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br><span class="line">dpkg -l | grep nodejs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作</title>
      <link href="/2022/10/02/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/02/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="git常用操作"><a href="#git常用操作" class="headerlink" title="git常用操作"></a>git常用操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建了空文件夹之后，在空文件夹中执行初始化命令</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">写了代码之后，添加文件到git的暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前git修改文件的状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将暂存区的文件提交到本地版本库中，-m 是添加提交信息的参数，后面的[message]是自定义的信息</span></span><br><span class="line">git commit -m &#x27;[message]&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看修改的文件与之前不同之处</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看每次提交(可以查看到每次提交的哈希值)</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到某一次提交，参数写 git <span class="built_in">log</span> 查看到的哈希值</span></span><br><span class="line">git checkout [Hash]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git没有远程仓库地址的时候要先添加才能推送</span></span><br><span class="line">git remote add origin [你的远程库地址]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送到远程仓库</span></span><br><span class="line">git push -u origin master #第一次推送</span><br><span class="line">git push origin master #第二次推送</span><br></pre></td></tr></table></figure><h3 id="git开发"><a href="#git开发" class="headerlink" title="git开发"></a>git开发</h3><blockquote><p>git多人协同，利用分支进行开发，开发完之后与主分支进行合并</p></blockquote><p>创建和切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建develop分支</span></span><br><span class="line">git branch develop [BranchName]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看本地分支（查看远程分支加 -r 参数）</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换分支</span></span><br><span class="line">git checkout develop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拉取代码</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改分支名称</span></span><br><span class="line">git branch -m [oldBranchName] [newBranchName]</span><br></pre></td></tr></table></figure><h3 id="利用IDEA进行git操作"><a href="#利用IDEA进行git操作" class="headerlink" title="利用IDEA进行git操作"></a>利用IDEA进行git操作</h3><h3 id="添加-ssh-key"><a href="#添加-ssh-key" class="headerlink" title="添加 ssh key"></a>添加 ssh key</h3><blockquote><p>使用npm进行npm install操作，要先添加github的ssh key</p><p>使用SSH公钥可以让你在你的电脑和 Git 通讯的时候使用安全连接（Git的Remote要使用SSH地址）</p></blockquote><p>先再本地生成ssh key， 然后再将生成的<code>id_rsa.pub</code>文件内容复制到github上面 <a href="https://blog.csdn.net/qq_38230265/article/details/79108862">github添加key具体教程</a></p><p>码云上面添加key也是相同操作 <a href="https://gitee.com/help/articles/4181#article-header0">码云官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置maven</title>
      <link href="/2022/09/30/%E9%85%8D%E7%BD%AEmaven/"/>
      <url>/2022/09/30/%E9%85%8D%E7%BD%AEmaven/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载以及修改配置"><a href="#1-下载以及修改配置" class="headerlink" title="1. 下载以及修改配置"></a>1. 下载以及修改配置</h3><p>这里要注意maven的版本要和idea对应, 也就是说maven-3.8.6不能用在idea2021.1.3上面, 我这里使用对应的配置是 maven-3.6.3 对应 idea2021.1.3<br>maven下载地址: <a href="https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/">https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/</a><br> 下载 <code>apache-maven-3.6.3-bin.zip</code>, 解压到自定义文件夹<br> 然后修改 <code>apache-maven-3.6.3/conf/settings.xml</code> 配置文件中的两个配置, 分别是镜像地址:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 然后自己创建一个repository文件夹, 这个文件夹当作存放maven仓库下载的依赖包, 在配置文件里面相应位置添加</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\development\maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h3><p>新建系统变量<br>变量名: MAVEN_HOME<br>变量值: maven的根目录<br>Path中添加:  <code>%MAVEN_HOME%\bin</code><br>cmd中检查是否配置成功: mvn -v</p><h3 id="3-配置idea使用自定义maven仓库"><a href="#3-配置idea使用自定义maven仓库" class="headerlink" title="3. 配置idea使用自定义maven仓库"></a>3. 配置idea使用自定义maven仓库</h3><p>打开一个项目, 然后close object<br>出现welcome界面, 点击侧边栏的Customize, 点击 All sttings… , 找到Maven, 修改<br>Maven home path 为自己配置的maven根目录<br>User setting 为maven&#x2F;conf&#x2F;settings.xml, 要勾选Override<br>这时Local repository会自己修改<br>修改完成之后, 每次新建新的项目就会使用自定义的maven仓库了</p><h3 id="4-maven项目导入指定版本的依赖会爆红"><a href="#4-maven项目导入指定版本的依赖会爆红" class="headerlink" title="4. maven项目导入指定版本的依赖会爆红"></a>4. maven项目导入指定版本的依赖会爆红</h3><p><a href="https://mvnrepository.com/">maven官网</a>搜索相应的依赖版本, 直接下载jar包,<br>然后命令行里面操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.2.33 -Dpackaging=jar -Dfile=fastjson-1.2.33.jar</span><br></pre></td></tr></table></figure><p>其对应的maven代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DgroupId -&gt; groupId<br>DartifactId -&gt; artifactId<br>Dversion -&gt; version<br>Dpackaging -&gt; 文件类型<br>Dfile -&gt; jar包文件名<br>运行之后出现 BUILD SUCCESS 表示成功了<br><a href="https://blog.csdn.net/qq_40788398/article/details/124803939">maven手动添加jar包</a><br><a href="https://blog.csdn.net/weixin_44985115/article/details/115253160?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166420757916800182746358%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166420757916800182746358&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-115253160-null-null.142%5Ev50%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=%E5%AE%89%E8%A3%85maven%E4%BB%93%E5%BA%93&spm=1018.2226.3001.4187">配置maven仓库的方法</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
